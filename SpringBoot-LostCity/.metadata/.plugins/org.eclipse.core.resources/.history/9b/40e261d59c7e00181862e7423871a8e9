package com.fasoo.blockchain.domain.users;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import javax.mail.SendFailedException;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.RandomStringUtils;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fasoo.blockchain.common.CustomOAuthTokenExtractor;
import com.fasoo.blockchain.common.DefineException;
import com.fasoo.blockchain.common.EmailService;
import com.fasoo.blockchain.common.EncryptUtil;
import com.fasoo.blockchain.config.SecurityConfig;
import com.fasoo.blockchain.domain.apps.AppDto;
import com.fasoo.blockchain.domain.apps.AppService;
import com.fasoo.blockchain.domain.recharge.RechargeDefineException;
import com.fasoo.blockchain.domain.recharge.RechargeDto;
import com.fasoo.blockchain.domain.recharge.RechargeService;

@EnableJpaAuditing
@Service
public class UserService implements UserDetailsService {

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private ModelMapper modelMapper;

	@Autowired
	private CustomOAuthTokenExtractor customOAuthTokenExtractor;
	
	@Autowired
	private EmailService emailService;
	
	@Autowired
	private RechargeService rechargeService;
	
	@Autowired
	private AppService appService;

	private final Logger logger = LoggerFactory.getLogger(getClass());
	
    private final String ORDER_BY_ASC = "asc";
    private final String ORDER_BY_DESC = "desc";
    
    
    @Value("${promotion.charge}")
    private String promotionCharge;

	// UserDetailsService impl
	public UserDetails loadUserByUsername(String email) {
		UserEntity user = userRepo.findByEmail(email);
		if (user == null) {
			throw new UserDefineException.NotFound(email);
		}
		
		if(!user.isActivated()) {
			throw new UserDefineException.UserIsNotActivated("UserIsNotActivated");
		}
		
		return new org.springframework.security.core.userdetails.User(user.getEmail(), user.getPwd(),
				getAuthority(user.isManager()));
	}

	// UserDetailsService impl
	private List<SimpleGrantedAuthority> getAuthority(boolean manager) {
		if (manager) {
			return Arrays.asList(new SimpleGrantedAuthority("ADMIN"));
		} else {
			return Arrays.asList(new SimpleGrantedAuthority("USER"));
		}
	}

	@Transactional
	public UserDto.Response add(HttpServletRequest httpRequest, UserDto.Create user) {
		if (userRepo.existsByEmail(user.getEmail())) {
			// exist
			throw new UserDefineException.Duplicated(user.getEmail(), httpRequest);
		}

		// add
		user.setPwd(SecurityConfig.userPasswordEncoder().encode(user.getPwd()));
		//set initial balance from properties
		user.setBalance(Double.parseDouble(this.promotionCharge));

		String activateToken = RandomStringUtils.random(32, true, true);

		UserEntity addUser = modelMapper.map(user, UserEntity.class);
		
		addUser.setActivateToken(activateToken);
		
		addUser = userRepo.save(addUser);
				
		String encText = addUser.getSid() + "," + addUser.getEmail();

		try {
			encText = URLEncoder.encode(EncryptUtil.Encrypt("AES256",activateToken,encText),"UTF-8");
			//send a mail
			emailService.sendMailWhenJoin(addUser.getEmail(), addUser.getSid(), encText);
		} catch (Exception  e) {
			logger.error(e.toString());
		}
		
//		//recharges add
//		RechargeDto.Create recharge = new RechargeDto.Create();
//		recharge.setUsersSid(addUser.getSid());
//		recharge.setCharge(Double.parseDouble(this.promotionCharge));
//		recharge.setType("promotion");
//		if(rechargeService.add(recharge) == null) {
//			throw new RechargeDefineException.CreateFail(httpRequest);
//		}
		
		//if user has no app, then add default app
		if(!appService.existsbyUsersSid(addUser.getSid())) {
			AppDto.Create app =  new AppDto.Create();
			app.setCoinsType("XRP_TESTNET");
			app.setName("FasooBlock");
			app.setScope("APP");
			app.setUsersSid(addUser.getSid());
			app.setDescription("FasooBlock Application");
			appService.add(httpRequest, app);
		}
		
		return modelMapper.map(addUser, UserDto.Response.class);
	}

	public UserEntity get(HttpServletRequest httpRequest, final Long users_sid) {
		return userRepo.findById(users_sid)
				.orElseThrow(() -> new UserDefineException.NotFound(users_sid, httpRequest));
	}
	
	public UserEntity getByEmail(HttpServletRequest httpRequest, final String users_email) {
		return Optional.ofNullable(userRepo.findByEmail(users_email))
				.orElseThrow(() -> new UserDefineException.NotFound(users_email, httpRequest));
	}

	@Transactional
	public UserEntity update(HttpServletRequest httpRequest, final Long users_sid, UserDto.Update user) {
		UserEntity updateUser = get(httpRequest, users_sid);
		updateUser.setName(user.getName());
		updateUser.setManager(user.getManager());

		// update
		return userRepo.save(updateUser);
	}

	@Transactional
	public UserEntity activate(HttpServletRequest httpRequest, final Long users_sid, UserDto.activate user) {

		String activate_decText = null;
		Long decrypted_sid = null;
		String decrypted_email = null;

		// get key
		UserEntity fetchedUser = get(httpRequest, users_sid);

		if (fetchedUser.isActivated()) {
			throw new UserDefineException.AlreadyActivated(users_sid, httpRequest);
		}

		String key = fetchedUser.getActivateToken();
		if (key.isEmpty()) {
			throw new UserDefineException.NotFoundActivateToken(users_sid, httpRequest);
		}

		// decrypt activate_token using key
		try {
			activate_decText = EncryptUtil.Decrypt("AES256",key,user.getActivateMessage());

		} catch (Exception e) {
			logger.error(e.toString());
			// throw can't create AES256Util
			throw new DefineException.CanNotCreateAES256Util(httpRequest);
		}

		// split activate_decText to user_sid & user_email by ,
		String[] words = activate_decText.split(",");
		decrypted_sid = Long.parseLong(words[0]);
		decrypted_email = words[1];

		// compare users_sid & decrypted_sid
		if (users_sid.longValue() == decrypted_sid.longValue()) {
			// compare with decrypted_email & fetchedUser.getEmail()
			// if they are not matched than return invalid activate_token error
			if (!fetchedUser.getEmail().equals(decrypted_email)) {
				// return invalid activate_token error
				throw new UserDefineException.UserEmailNotMatched(fetchedUser.getEmail(), httpRequest);
			}
		} else {
			throw new UserDefineException.UserSidNotMatched(users_sid, httpRequest);
		}

		// if all user_emails are matched than
		// set Activated true
		fetchedUser.setActivated(true);
		
//		// delete activate_token
//		fetchedUser.setActivateToken("");

		// update
		return userRepo.save(fetchedUser);
	}

	@Transactional
	public void delete(HttpServletRequest httpRequest, final Long users_sid) {
		UserEntity deleteUser = get(httpRequest, users_sid);
		customOAuthTokenExtractor.removeAuthToken(deleteUser.getEmail());
		userRepo.deleteById(users_sid);
	}
	
	public boolean valid(Sort sort) {
		
		return true;
	}

	public PageImpl<UserDto.Response> search(HttpServletRequest httpRequest, final String search, Pageable pageable) {
		
		Sort sort = pageable.getSort();
		List<Sort.Order> list = new ArrayList<>();

		for (Order order : sort) {
			if (!UserDto.ParamMapper.sortProperties.containsKey(order.getProperty().toLowerCase())) {
				throw new DefineException.BadReqeust(httpRequest);
			}
			if (!(ORDER_BY_ASC.equalsIgnoreCase(order.getDirection().toString())
					|| ORDER_BY_DESC.equalsIgnoreCase(order.getDirection().toString()))) {
				throw new DefineException.BadReqeust(httpRequest);
			}
			list.add(new Order(order.getDirection(), UserDto.ParamMapper.sortProperties.get(order.getProperty().toLowerCase())));
		}

		pageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), Sort.by(list));
		
		Specification<UserEntity> spec = null;
		Page<UserEntity> searchUsers = null;

		if (search != null) {
			UserSpecificationsBuilder builder = new UserSpecificationsBuilder();
			Pattern pattern = Pattern.compile("(\\w+?)(:|<|>|;)((\\w|[가-힣])+?),");
			Matcher matcher = pattern.matcher(search + ",");
			while (matcher.find()) {
				if(!UserDto.ParamMapper.searchProperties.containsKey(matcher.group(1).toLowerCase())) {
    				throw new DefineException.BadReqeust(httpRequest);
    			}
				builder.with(UserDto.ParamMapper.searchProperties.get(matcher.group(1).toLowerCase()), matcher.group(2), matcher.group(3));
			}
			spec = builder.build();
		}

		if (spec == null) {
			searchUsers = userRepo.findAll(pageable);
		} else {
			searchUsers = userRepo.findAll(spec, pageable);
		}

		List<UserDto.Response> users = searchUsers.getContent().stream()
				.map(userEntity -> modelMapper.map(userEntity, UserDto.Response.class)).collect(Collectors.toList());

		return new PageImpl<>(users, pageable, searchUsers.getTotalElements());
	}

	// changePwd
	@Transactional
	public UserEntity changePwd(HttpServletRequest httpRequest, final Long users_sid, UserDto.Password user) {
		UserEntity updateUser = get(httpRequest, users_sid);

		if (!SecurityConfig.userPasswordEncoder().matches(user.getPwd(), updateUser.getPwd())) {
			throw new UserDefineException.invalidPwd(updateUser.getEmail(), httpRequest);
		}

		if (user.getNew_pwd().equals(user.getPwd())) {
			throw new UserDefineException.samePwd(updateUser.getEmail(), httpRequest);
		}
		updateUser.setPwd(SecurityConfig.userPasswordEncoder().encode(user.getNew_pwd()));
		//
		// update
		return userRepo.save(updateUser);
	}

	// resetPwd
	@Transactional
	public UserEntity resetPwd(HttpServletRequest httpRequest, final String users_email) {
		UserEntity updateUser = getByEmail(httpRequest, users_email);

		String pwd = RandomStringUtils.random(16, true, true);

		// System.out.println(pwd);
		updateUser.setPwd(SecurityConfig.userPasswordEncoder().encode(pwd));

		// expire user's token
		if (customOAuthTokenExtractor.removeAuthToken(updateUser.getEmail())) {
			// send a mail
			try {
				emailService.sendMailWhenResetPwd(updateUser.getEmail(), pwd);
			} catch (SendFailedException e) {
				logger.error(e.toString());
				throw new UserDefineException.SendEmailFailed(updateUser.getEmail(), httpRequest);
			}
		}

		// update
		return userRepo.save(updateUser);
	}
	
	//updateServiceFee
	public UserEntity updateServiceFee(HttpServletRequest httpRequest, final Long users_sid, double serviceFee) {
		UserEntity updateUser = get(httpRequest, users_sid);

		double updateBalance = updateUser.getBalance() - serviceFee;
		
		updateUser.setBalance(updateBalance);

		// update
		return userRepo.save(updateUser);
	}
	
	// delete Activate_token
	public UserEntity deleteActivateToken(HttpServletRequest httpRequest, final Long users_sid) {
		UserEntity fetchedUser = get(httpRequest, users_sid);

		fetchedUser.setActivateToken("");

		// update
		return userRepo.save(fetchedUser);
	}
}
