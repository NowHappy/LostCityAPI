package com.happy.game.lostcity.domain.users;


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.happy.game.lostcity.common.CustomOAuthTokenExtractor;
import com.happy.game.lostcity.common.DefineException;
import com.happy.game.lostcity.common.ErrorResultBean;

@RestController
@RequestMapping("/api/{v}/users")
public class UserControl {

    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private CustomOAuthTokenExtractor customOAuthTokenExtractor;

    @Autowired
    private UserService userService;

    // create
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity<UserDto.UserInfo> add(HttpServletRequest httpRequest,
                                  @PathVariable("v") String v,
                                  @RequestBody @Valid UserDto.Create user,
                                  BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            throw new DefineException.BadReqeust(bindingResult, httpRequest);
        }

        switch (v) {
            case "1.0":
                UserDto.UserInfo addUser = userService.add(httpRequest, user);
                return new ResponseEntity<>(addUser, HttpStatus.CREATED);
            default:
                throw new DefineException.InvalidAPIVersion(v, httpRequest);
        }
    }

    // info
    @RequestMapping(method = RequestMethod.GET, value = "/{users_sid}")
    public ResponseEntity<UserDto.UserInfo> get(HttpServletRequest httpRequest,
                                  @AuthenticationPrincipal OAuth2Authentication authentication,
                                  @PathVariable("v") String v,
                                  @PathVariable("users_sid") Long users_sid) {
        if (!customOAuthTokenExtractor.canAccess(true, authentication, users_sid)) {
            throw new DefineException.AccessDenied(httpRequest);
        }

        switch (v) {
            case "1.0":
                UserEntity user = userService.get(httpRequest, users_sid);
                return new ResponseEntity<>(modelMapper.map(user, UserDto.UserInfo.class), HttpStatus.OK);
            default:
                throw new DefineException.InvalidAPIVersion(v, httpRequest);
        }
    }

    // update
    @RequestMapping(method = RequestMethod.PUT, value = "/{users_sid}")
    public ResponseEntity<UserDto.UserInfo> update(HttpServletRequest httpRequest,
                                     @AuthenticationPrincipal OAuth2Authentication authentication,
                                     @PathVariable("v") String v,
                                     @PathVariable("users_sid") Long users_sid,
                                     @RequestBody @Valid UserDto.UserInfo user,
                                     BindingResult bindingResult) {
        if (!customOAuthTokenExtractor.canAccess(false, authentication, users_sid)) {
            throw new DefineException.AccessDenied(httpRequest);
        }

        if (bindingResult.hasErrors()) {
            throw new DefineException.BadReqeust(bindingResult, httpRequest);
        }

        switch (v) {
            case "1.0":
                UserEntity updateUser = userService.update(httpRequest, users_sid, user);
                return new ResponseEntity<>(modelMapper.map(updateUser, UserDto.UserInfo.class), HttpStatus.OK);
            default:
                throw new DefineException.InvalidAPIVersion(v, httpRequest);
        }
    }
    

    // delete
    @RequestMapping(method = RequestMethod.DELETE, value = "/{users_sid}")
    public ResponseEntity<Void> delete(HttpServletRequest httpRequest,
                                     @AuthenticationPrincipal OAuth2Authentication authentication,
                                     @PathVariable("v") String v,
                                     @PathVariable("users_sid") Long users_sid) {
        if (!customOAuthTokenExtractor.canAccess(true, authentication, users_sid)) {
            throw new DefineException.AccessDenied(httpRequest);
        }

        switch (v) {
            case "1.0":
                userService.delete(httpRequest, users_sid);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            default:
                throw new DefineException.InvalidAPIVersion(v, httpRequest);
        }
    }
    
    //changePwd
	@RequestMapping(method = RequestMethod.PUT, value = "/{users_sid}/pwd")
	public ResponseEntity<UserDto.UserInfo> changePwd(HttpServletRequest httpRequest,
									@AuthenticationPrincipal OAuth2Authentication authentication,
									@PathVariable("v") String v,
									@PathVariable("users_sid") Long users_sid, 
									@RequestBody @Valid UserDto.Password user,
									BindingResult bindingResult) {
		if (!customOAuthTokenExtractor.canAccess(false, authentication, users_sid)) {
            throw new DefineException.AccessDenied(httpRequest);
        }

		if (bindingResult.hasErrors()) {
			throw new DefineException.BadReqeust(bindingResult, httpRequest);
		}

		switch (v) {
			case "1.0":
				UserEntity updateUser = userService.changePwd(httpRequest, users_sid, user);
				customOAuthTokenExtractor.removeAuthToken(updateUser.getId());
				return new ResponseEntity<>(modelMapper.map(updateUser, UserDto.UserInfo.class), HttpStatus.OK);
			default:
				throw new DefineException.InvalidAPIVersion(v, httpRequest);
		}

    }
    
    //resetPwd
    @RequestMapping(method = RequestMethod.PATCH, value = "/{users_email}/pwd")
    public ResponseEntity<UserDto.UserInfo> resetPwd(HttpServletRequest httpRequest,
                                  @PathVariable("v") String v,
                                  @PathVariable("users_email") String users_email) {
        
        switch (v) {
            case "1.0":
                UserEntity user = userService.resetPwd(httpRequest, users_email);
                return new ResponseEntity<>(modelMapper.map(user, UserDto.UserInfo.class), HttpStatus.OK);
                
            default:
                throw new DefineException.InvalidAPIVersion(v, httpRequest);
        }
    }

    @ExceptionHandler(UserDefineException.Duplicated.class)
    public ResponseEntity<ErrorResultBean> DuplicatedHandler(UserDefineException.Duplicated e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.CONFLICT.value());
        errorResultBean.setError("duplicated_user");
        errorResultBean.setMessage("�룞�씪�븳 �뜲�씠�꽣媛� 議댁옱�빀�땲�떎. [" + e.getEmail() + "]");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(UserDefineException.NotFound.class)
    public ResponseEntity<ErrorResultBean> NotFoundHandler(UserDefineException.NotFound e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.NOT_FOUND.value());
        errorResultBean.setError("not_found_user");
        errorResultBean.setMessage("�뜲�씠�꽣媛� �뾾�뒿�땲�떎. [" + e.getUsers_sid() + "]");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.NOT_FOUND);
    }
    
    @ExceptionHandler(UserDefineException.invalidPwd.class)
    public ResponseEntity<ErrorResultBean> invalidPwd(UserDefineException.invalidPwd e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.UNAUTHORIZED.value());
        errorResultBean.setError("invalid_pwd");
        errorResultBean.setMessage(" �옒紐삳맂 鍮꾨�踰덊샇�엯�땲�떎. [" + e.getEmail() + "]");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.UNAUTHORIZED);
    }
    
    @ExceptionHandler(UserDefineException.samePwd.class)
    public ResponseEntity<ErrorResultBean> samePwd(UserDefineException.samePwd e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.CONFLICT.value());
        errorResultBean.setError("duplicated_pwd");
        errorResultBean.setMessage(" 湲곗〈 鍮꾨�踰덊샇�� 蹂�寃쏀븯怨좎옄 �븯�뒗 鍮꾨�踰덊샇�� �룞�씪�빀�땲�떎. [" + e.getEmail() + "]");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.CONFLICT);
    }
    
    @ExceptionHandler(UserDefineException.SendEmailFailed.class)
    public ResponseEntity<ErrorResultBean> SendMailErrorHandler(UserDefineException.SendEmailFailed e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
        errorResultBean.setError("Internal_Server_Error");
        errorResultBean.setMessage("硫붿씪 諛쒖넚�뿉 �떎�뙣�뻽�뒿�땲�떎.");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @ExceptionHandler(UserDefineException.UserSidNotMatched.class)
    public ResponseEntity<ErrorResultBean> UserSidNotMatched(UserDefineException.UserSidNotMatched e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.BAD_REQUEST.value());
        errorResultBean.setError("not_matched_user_sid");
        errorResultBean.setMessage("�옒紐삳맂 �슂泥��엯�땲�떎. [" + e.getUsers_sid() + "]");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.BAD_REQUEST);
    }
    
    @ExceptionHandler(UserDefineException.NotFoundActivateToken.class)
    public ResponseEntity<ErrorResultBean> NotFoundActivateToken(UserDefineException.NotFoundActivateToken e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
        errorResultBean.setError("not_found_activate_token");
        errorResultBean.setMessage("�솢�꽦�솕 �넗�겙�쓣 李얠쓣 �닔 �뾾�뒿�땲�떎.");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    @ExceptionHandler(UserDefineException.UserEmailNotMatched.class)
    public ResponseEntity<ErrorResultBean> UserEmailNotMatched(UserDefineException.UserEmailNotMatched e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.NOT_FOUND.value());
        errorResultBean.setError("not_matched_user_email");
        errorResultBean.setMessage("�궗�슜�옄 �씠硫붿씪 �젙蹂닿� �씪移섑븯吏� �븡�뒿�땲�떎.");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(UserDefineException.AlreadyActivated.class)
    public ResponseEntity<ErrorResultBean> UserAlreadyActivated(UserDefineException.AlreadyActivated e) {
        ErrorResultBean errorResultBean = new ErrorResultBean();
        errorResultBean.setStatus(HttpStatus.PRECONDITION_FAILED.value());
        errorResultBean.setError("already_activated");
        errorResultBean.setMessage("�씠誘� �솢�꽦�솕�맂 �궗�슜�옄�엯�땲�떎.[" + e.getUsersSid() + "]");
        errorResultBean.setPath(e.getPath());
        return new ResponseEntity<>(errorResultBean, HttpStatus.PRECONDITION_FAILED);
    }
}
